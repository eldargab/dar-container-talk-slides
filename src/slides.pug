section
  h1.f3.fw-300.gray.mb2 Dependency Injection
  p Расширяем область применения


section
  h1.f3.fw-300.gray.mb3 Цели доклада
  ol
    li.mb2.fragment Сформулировать ключевую идею лежащую в основе DI
    li.mb2.fragment(data-fragment-index=1) Представить новый контейнер

  aside.notes
    p.
      В этом докладе мы хотим представить новый контейнер.
      Он весьма не похож на традиционные Java контейнеры
      и обладает важной особенностью, которая позволяет применять
      ключевую идею, лежащую в основе DI, более широко и с большим успехом.
    p.
      С формулировки ключевой идеи DI мы и начнём...


section
  .fullsize.flex.align-items-center.pad-center
    pre: code.javascript
      include examples/abc.js
    .example-graph.ml4
      include examples/abc.svg

  aside.notes
    p.
      Для этого посмотрим на наш код не как на некую последовательность действий,
      а как на граф, вершины которого обозначают элементарные операции,
      а рёбра их непосредственную зависимость друг от друга.


section
  .fullsize.flex.align-items-center.pad-center
    .example-graph
      include examples/simple.svg
    pre.ml5.fragment(style="padding-top: 3%"): code.javascript
      include examples/simple.js

  aside.notes
    p.
      В самом оптимистичном случае такой граф будет представлять собой дерево.
      Дерево замечательно тем, что для его реализации нам достаточно самых базовых
      приёмов программирования. Действительно, если операций станет слишком много,
      мы всегда сможем разбить их на отдельные подпрограммы, каждая из которых будет
      оставаться простой.

